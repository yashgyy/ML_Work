#include <iostream>
#include <vector>
#include <boost/asio.hpp>
#include <thread>
#include <mutex>
#include "random_forest.h"  // Assuming a RandomForest implementation is available
#include "data_loader.cpp"

using namespace std;
using boost::asio::ip::tcp;

const int BATCH_SIZE = 100;
const int EPOCHS = 3;

// Send a batch of trees to the server
void send_trees(tcp::socket &socket, const vector<TreeNode *> &trees) {
    int num_trees = trees.size();
    boost::asio::write(socket, boost::asio::buffer(&num_trees, sizeof(int)));

    for (const auto &tree : trees) {
        vector<double> serialized_tree;
        serialize_tree_node(tree, serialized_tree);
        int tree_size = serialized_tree.size();
        boost::asio::write(socket, boost::asio::buffer(&tree_size, sizeof(int)));
        boost::asio::write(socket, boost::asio::buffer(serialized_tree.data(), tree_size * sizeof(double)));
    }
}

// Receive the global forest from the server
void receive_global_forest(tcp::socket &socket, vector<TreeNode *> &global_forest) {
    int num_trees;
    boost::asio::read(socket, boost::asio::buffer(&num_trees, sizeof(int)));

    global_forest.clear();
    for (int i = 0; i < num_trees; ++i) {
        int tree_size;
        boost::asio::read(socket, boost::asio::buffer(&tree_size, sizeof(int)));

        vector<double> serialized_tree(tree_size);
        boost::asio::read(socket, boost::asio::buffer(serialized_tree.data(), tree_size * sizeof(double)));

        int index = 0;
        TreeNode *tree = deserialize_tree_node(serialized_tree, index);
        global_forest.push_back(tree);
    }
}

void train_and_send_batches(tcp::socket &socket, RandomForest &local_forest, const MatrixXd &data, const VectorXd &labels) {
    int num_samples = data.rows();
    int num_batches = (num_samples + BATCH_SIZE - 1) / BATCH_SIZE;

    for (int epoch = 0; epoch < EPOCHS; ++epoch) {
        cout << "[INFO] Starting epoch " << epoch + 1 << " of " << EPOCHS << endl;

        for (int batch_idx = 0; batch_idx < num_batches; ++batch_idx) {
            int start = batch_idx * BATCH_SIZE;
            int end = min(start + BATCH_SIZE, num_samples);

            MatrixXd batch_data = data.block(start, 0, end - start, data.cols());
            VectorXd batch_labels = labels.segment(start, end - start);

            vector<TreeNode *> trained_trees = local_forest.train(batch_data, batch_labels);

            cout << "[INFO] Sending batch " << batch_idx + 1 << " of " << num_batches << endl;
            send_trees(socket, trained_trees);

            vector<TreeNode *> global_forest;
            receive_global_forest(socket, global_forest);

            local_forest.integrate_global_forest(global_forest);
        }
    }
}

int main() {
    try {
        // Load data
        MatrixXd data;
        VectorXd labels;
        load_data("/path/to/train.csv", data, labels);

        // Initialize local Random Forest
        RandomForest local_forest(10);  // Example: 10 trees

        // Connect to the server
        boost::asio::io_context io_context;
        tcp::socket socket(io_context);
        socket.connect(tcp::endpoint(boost::asio::ip::address::from_string("127.0.0.1"), 8080));

        // Train and send updates in batches
        train_and_send_batches(socket, local_forest, data, labels);

        socket.close();
    } catch (const std::exception &e) {
        cerr << "[ERROR] " << e.what() << endl;
    }

    return 0;
}
